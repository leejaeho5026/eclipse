20230602

 MVC: Model-View-Controller
 
 Model: application business layer
 Controller: application 의 흐름을 관리하는 layer
 View: application presentation layer 화면 출력
 
 기본 디폴트는 doget방식
 index.jsp 에서 location.href="main.mvc"를 찾아간다 -> HomeController.java 에서 @WebServlet("*.mvc") doget으로 받아 실행한다.
 
 //요청한 주소(URL)를 가져옴
		String url =  request.getRequestURI(); 
 
 if(url.contains("main.mvc")) {   	// contains 포함하다 -> main.mvc모델을 포함하고 있다면 main 요청을 찍어라
			System.out.println("main 요청");
			
			
			
// view로 사용하는 jsp
String viewName = null;   => viewName를 null값으로 초기화 시키고

if(url.contains("main.mvc")) { main.mvc모델을 포함하고 있으면
	viewName = "main.jsp";   viewName은 main.jsp를 출력한다.
}

RequestDispatcher dis = request.getRequestDispatcher(viewName); => RequestDispatcher는 forward(), include() 메소드를 사용하는 객체이고
		dis.forward(request, response);							   다른 페이지로 이동하는 forward 메소드는 viewName이라는 뷰페이지 파일로
																   이동하라는 뜻이다.
																   RequestDispatcher 객체는 new 연산자로 생성하는 것이 아니라 메소드를 
																   이용하여 생성해야 된다.
	// parameter 추출하기 받는 것을 파라미터라고 한다			   HttpServletRequest객체의 RequestDispatchar()가 객체를 생성해주는 메소드이다.
																   request와 response로 보내고 받고 있다.
																   
																   
익스플로어 주소가 요청한 url -> 컨트롤러가  @WebServlet("*.mvc") 로받아서 view로 보내기  																   
Controller 가 어디로 보낼지 하는 역활 doget으로 객체로 받아서 담아서 view로 보내면 익스플로어에 실행
																 
url ? 변수 : &로 내용을 담아서 보낼 수도 있다.  
<h2><a href= "test1.mvc?number1=111&number2=222">test1</a><br></h2>


																   
Controller : view와 Model 간의 interface 역활을 한다.
			 view 계층에서 요청을 받고 필요한 유효성 검사를 포함해서 처리한다.
			 
요청은 data 처리를 위해서 Model 계층으로 추가되어서 전달되고
처리가 되면 data는 Controller로 다시 전송된 후 View에 표시됨

Model : business logic 처리 + DB연동 작업



View : UI 형식의 응용 프로그램 출력을 나타낸다.
		presentation layer(View)는 Controller가 가져온 Model data를 표시하는데 사용됨			
		
		
															   
																   
																   
																   
																   
																   
																   